import { DefaultDependencyRegistryEngine, TsyringeDependencyRegistryEngine, TypeDiDependencyRegistryEngine } from "./logic/impl/index.js";
import type { IDependencyRegistryEngine } from "./logic/index.js";
export * from "./logic/index.js";
export declare const typeDiDependencyRegistryEngine: TypeDiDependencyRegistryEngine;
export declare const tsyringeDependencyRegistryEngine: TsyringeDependencyRegistryEngine;
export declare const defaultDependencyRegistryEngine: DefaultDependencyRegistryEngine;
export declare type InstanceOf<T> = T extends new (...args: unknown[]) => infer R ? R : unknown;
/**
 * The dependency injection service creates a single instance of a class and stores it globally using the singleton design pattern
 *
 * @category Internal
 */
export declare class DIService {
    private static _diEngineToUse;
    private static _instance;
    static get engine(): IDependencyRegistryEngine;
    static set engine(engine: IDependencyRegistryEngine);
    static get instance(): DIService;
    /**
     * Get all Discord service classes
     * @returns {Set<unknown>}
     */
    static get allServices(): Set<unknown>;
    /**
     * Add a service from the IOC container.
     * @param {T} classType - The type of service to add
     */
    addService<T>(classType: T): void;
    /**
     * Get a service from the IOC container
     * @param {T} classType - the Class of the service to retrieve
     * @returns {InstanceOf<T> | null} the instance of this service or null if there is no instance
     */
    getService<T>(classType: T): InstanceOf<T> | null;
}
