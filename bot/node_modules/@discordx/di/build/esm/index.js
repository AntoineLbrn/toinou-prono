import { DefaultDependencyRegistryEngine, TsyringeDependencyRegistryEngine, TypeDiDependencyRegistryEngine, } from "./logic/impl/index.js";
export * from "./logic/index.js";
// util instances of built-in engines
export const typeDiDependencyRegistryEngine = TypeDiDependencyRegistryEngine.instance;
export const tsyringeDependencyRegistryEngine = TsyringeDependencyRegistryEngine.instance;
export const defaultDependencyRegistryEngine = DefaultDependencyRegistryEngine.instance;
/**
 * The dependency injection service creates a single instance of a class and stores it globally using the singleton design pattern
 *
 * @category Internal
 */
export class DIService {
    static _diEngineToUse = defaultDependencyRegistryEngine;
    static _instance;
    static get engine() {
        return DIService._diEngineToUse;
    }
    static set engine(engine) {
        DIService._diEngineToUse = engine;
    }
    static get instance() {
        if (!this._instance) {
            this._instance = new DIService();
        }
        return this._instance;
    }
    /**
     * Get all Discord service classes
     * @returns {Set<unknown>}
     */
    static get allServices() {
        return DIService.engine.getAllServices();
    }
    /**
     * Add a service from the IOC container.
     * @param {T} classType - The type of service to add
     */
    addService(classType) {
        DIService.engine.addService(classType);
    }
    /**
     * Get a service from the IOC container
     * @param {T} classType - the Class of the service to retrieve
     * @returns {InstanceOf<T> | null} the instance of this service or null if there is no instance
     */
    getService(classType) {
        return DIService.engine.getService(classType);
    }
}
//# sourceMappingURL=index.js.map