"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DIService = exports.defaultDependencyRegistryEngine = exports.tsyringeDependencyRegistryEngine = exports.typeDiDependencyRegistryEngine = void 0;
const index_js_1 = require("./logic/impl/index.js");
__exportStar(require("./logic/index.js"), exports);
// util instances of built-in engines
exports.typeDiDependencyRegistryEngine = index_js_1.TypeDiDependencyRegistryEngine.instance;
exports.tsyringeDependencyRegistryEngine = index_js_1.TsyringeDependencyRegistryEngine.instance;
exports.defaultDependencyRegistryEngine = index_js_1.DefaultDependencyRegistryEngine.instance;
/**
 * The dependency injection service creates a single instance of a class and stores it globally using the singleton design pattern
 *
 * @category Internal
 */
class DIService {
    static _diEngineToUse = exports.defaultDependencyRegistryEngine;
    static _instance;
    static get engine() {
        return DIService._diEngineToUse;
    }
    static set engine(engine) {
        DIService._diEngineToUse = engine;
    }
    static get instance() {
        if (!this._instance) {
            this._instance = new DIService();
        }
        return this._instance;
    }
    /**
     * Get all Discord service classes
     * @returns {Set<unknown>}
     */
    static get allServices() {
        return DIService.engine.getAllServices();
    }
    /**
     * Add a service from the IOC container.
     * @param {T} classType - The type of service to add
     */
    addService(classType) {
        DIService.engine.addService(classType);
    }
    /**
     * Get a service from the IOC container
     * @param {T} classType - the Class of the service to retrieve
     * @returns {InstanceOf<T> | null} the instance of this service or null if there is no instance
     */
    getService(classType) {
        return DIService.engine.getService(classType);
    }
}
exports.DIService = DIService;
//# sourceMappingURL=index.js.map