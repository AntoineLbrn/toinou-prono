import { DIService } from "@discordx/di";
import { Decorator } from "@discordx/internal";
/**
 * @category Decorator
 */
export class DDiscord extends Decorator {
    _applicationCommands = [];
    _botIds = [];
    _buttonComponents = [];
    _description;
    _events = [];
    _guards = [];
    _guilds = [];
    _modalComponents = [];
    _name;
    _reactions = [];
    _selectMenuComponents = [];
    _simpleCommands = [];
    get applicationCommands() {
        return this._applicationCommands;
    }
    set applicationCommands(value) {
        this._applicationCommands = value;
    }
    get botIds() {
        return this._botIds;
    }
    set botIds(value) {
        this._botIds = value;
    }
    get buttons() {
        return this._buttonComponents;
    }
    set buttons(value) {
        this._buttonComponents = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get events() {
        return this._events;
    }
    set events(value) {
        this._events = value;
    }
    get guards() {
        return this._guards;
    }
    set guards(value) {
        this._guards = value;
    }
    get guilds() {
        return this._guilds;
    }
    set guilds(value) {
        this._guilds = value;
    }
    get instance() {
        return DIService.instance.getService(this.from);
    }
    get modal() {
        return this._modalComponents;
    }
    set modal(value) {
        this._modalComponents = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get reactions() {
        return this._reactions;
    }
    set reactions(value) {
        this._reactions = value;
    }
    get selectMenus() {
        return this._selectMenuComponents;
    }
    set selectMenus(value) {
        this._selectMenuComponents = value;
    }
    get simpleCommands() {
        return this._simpleCommands;
    }
    set simpleCommands(value) {
        this._simpleCommands = value;
    }
    constructor(name, description) {
        super();
        this._name = name;
        this._description = description ?? name;
    }
    static create(name, description) {
        return new DDiscord(name, description);
    }
}
//# sourceMappingURL=DDiscord.js.map