import type { ApplicationCommandType, ChatInputCommandInteraction, LocalizationMap, PermissionResolvable } from "discord.js";
import type { ApplicationCommandDataEx, Client, IGuild } from "../../index.js";
import { DApplicationCommandOption } from "../../index.js";
import { Method } from "./Method.js";
declare type CreateStructure = {
    botIds?: string[];
    defaultMemberPermissions?: PermissionResolvable | null;
    description: string;
    descriptionLocalizations?: LocalizationMap | null;
    dmPermission?: boolean;
    guilds?: IGuild[];
    name: string;
    nameLocalizations?: LocalizationMap | null;
    type: ApplicationCommandType;
};
/**
 * @category Decorator
 */
export declare class DApplicationCommand extends Method {
    private _botIds;
    private _name;
    private _nameLocalizations;
    private _description;
    private _descriptionLocalizations;
    private _defaultMemberPermissions;
    private _dmPermission;
    private _guilds;
    private _group?;
    private _options;
    private _subgroup?;
    private _type;
    get botIds(): string[];
    set botIds(value: string[]);
    get description(): string;
    set description(value: string);
    get defaultMemberPermissions(): PermissionResolvable | null;
    set defaultMemberPermissions(value: PermissionResolvable | null);
    get dmPermission(): boolean;
    set dmPermission(value: boolean);
    get descriptionLocalizations(): LocalizationMap | null;
    set descriptionLocalizations(value: LocalizationMap | null);
    get group(): string | undefined;
    set group(value: string | undefined);
    get guilds(): IGuild[];
    set guilds(value: IGuild[]);
    get name(): string;
    set name(value: string);
    get nameLocalizations(): LocalizationMap | null;
    set nameLocalizations(value: LocalizationMap | null);
    get options(): DApplicationCommandOption[];
    set options(value: DApplicationCommandOption[]);
    get subgroup(): string | undefined;
    set subgroup(value: string | undefined);
    get type(): ApplicationCommandType;
    set type(value: ApplicationCommandType);
    protected constructor(data: CreateStructure);
    static create(data: CreateStructure): DApplicationCommand;
    isBotAllowed(botId: string): boolean;
    getGuilds(client: Client): Promise<string[]>;
    isGuildAllowed(client: Client, guildId: string | null): Promise<boolean>;
    toSubCommand(): DApplicationCommandOption;
    toJSON(): ApplicationCommandDataEx;
    parseParams(interaction: ChatInputCommandInteraction): unknown[];
}
export {};
