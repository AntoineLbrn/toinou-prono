import { Modifier } from "@discordx/internal";
import { DApplicationCommand, DApplicationCommandGroup, DDiscord, MetadataStorage, SlashNameValidator, } from "../../index.js";
/**
 * Assign a group to a method or class
 *
 * @param options - Group options or name
 * @param root - Root name of group
 * ___
 *
 * [View discordx documentation](https://discordx.js.org/docs/discordx/decorators/command/slash-group)
 *
 * [View discord documentation](https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups)
 *
 * @category Decorator
 */
export function SlashGroup(options, root) {
    return function (target, key, descriptor) {
        if (typeof options === "string") {
            // If @SlashGroup decorate a method edit the method and add it to subgroup
            MetadataStorage.instance.addModifier(Modifier.create((original) => {
                if (original instanceof DDiscord) {
                    [...original.applicationCommands].forEach((obj) => {
                        obj.group = root ?? options;
                        obj.subgroup = root ? options : undefined;
                    });
                }
                else {
                    original.group = root ?? options;
                    original.subgroup = root ? options : undefined;
                }
            }, DApplicationCommand, DDiscord).decorateUnknown(target, key, descriptor));
        }
        else {
            SlashNameValidator(options.name);
            const clazz = target;
            if (options.root) {
                MetadataStorage.instance.addApplicationCommandSlashSubGroups(DApplicationCommandGroup.create({
                    name: options.name,
                    payload: {
                        description: options.description,
                        descriptionLocalizations: options.descriptionLocalizations,
                        nameLocalizations: options.nameLocalizations,
                    },
                    root: options.root,
                }).decorate(clazz, clazz.name));
            }
            else {
                MetadataStorage.instance.addApplicationCommandSlashGroups(DApplicationCommandGroup.create({
                    name: options.name,
                    payload: {
                        defaultMemberPermissions: options.defaultMemberPermissions,
                        description: options.description,
                        descriptionLocalizations: options.descriptionLocalizations,
                        dmPermission: options.dmPermission,
                        nameLocalizations: options.nameLocalizations,
                    },
                }).decorate(clazz, key ?? clazz.name));
            }
        }
    };
}
//# sourceMappingURL=SlashGroup.js.map