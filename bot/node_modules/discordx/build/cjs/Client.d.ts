import type { AutocompleteInteraction, ButtonInteraction, CommandInteraction, ContextMenuCommandInteraction, Interaction, Message, MessageReaction, ModalSubmitInteraction, PartialMessageReaction, PartialUser, SelectMenuInteraction, Snowflake, User } from "discord.js";
import { Client as ClientJS } from "discord.js";
import type { ClientOptions, DApplicationCommand, DApplicationCommandGroup, DApplicationCommandOption, DComponent, DDiscord, DOn, DReaction, DSimpleCommand, GuardFunction, IGuild, InitCommandOptions, IPrefix, IPrefixResolver, ISimpleCommandByName, ITriggerEventData, SimpleCommandConfig } from "./index.js";
import { MetadataStorage, SimpleCommandMessage, SimpleCommandParseType } from "./index.js";
/**
 * Extend original client class of discord.js
 *
 * @param options - Client options
 * ___
 *
 * [View Documentation](https://discordx.js.org/docs/discordx/basics/client)
 */
export declare class Client extends ClientJS {
    private _botId;
    private _isBuilt;
    private _prefix;
    private _simpleCommandConfig?;
    private _silent;
    private _botGuilds;
    private _guards;
    private logger;
    static get applicationCommandSlashesFlat(): readonly DApplicationCommand[];
    static get applicationCommandSlashes(): readonly DApplicationCommand[];
    static get applicationCommandUsers(): readonly DApplicationCommand[];
    static get applicationCommandMessages(): readonly DApplicationCommand[];
    static get applicationCommandSlashOptions(): readonly DApplicationCommandOption[];
    static get applicationCommands(): readonly DApplicationCommand[];
    static get applicationCommandSlashGroups(): readonly DApplicationCommandGroup[];
    static get applicationCommandSlashSubGroups(): readonly DApplicationCommandGroup[];
    static get buttonComponents(): readonly DComponent[];
    static get discords(): readonly DDiscord[];
    static get events(): readonly DOn[];
    static get instance(): MetadataStorage;
    static get modalComponents(): readonly DComponent[];
    static get reactions(): readonly DReaction[];
    static get selectMenuComponents(): readonly DComponent[];
    static get simpleCommandsByName(): readonly ISimpleCommandByName[];
    static get simpleCommandsByPrefix(): Map<string, ISimpleCommandByName[]>;
    static get simpleCommands(): readonly DSimpleCommand[];
    get applicationCommandSlashes(): readonly DApplicationCommand[];
    get applicationCommandSlashesFlat(): readonly DApplicationCommand[];
    get applicationCommandSlashOptions(): readonly DApplicationCommandOption[];
    get applicationCommandSlashGroups(): readonly DApplicationCommandGroup[];
    get applicationCommandSlashSubGroups(): readonly DApplicationCommandGroup[];
    get applicationCommandUsers(): readonly DApplicationCommand[];
    get applicationCommandMessages(): readonly DApplicationCommand[];
    get applicationCommands(): readonly DApplicationCommand[];
    get buttonComponents(): readonly DComponent[];
    get discords(): readonly DDiscord[];
    get events(): readonly DOn[];
    get instance(): MetadataStorage;
    get modalComponents(): readonly DComponent[];
    get reactions(): readonly DReaction[];
    get selectMenuComponents(): readonly DComponent[];
    get simpleCommandsByName(): readonly ISimpleCommandByName[];
    get simpleCommandsByPrefix(): Map<string, ISimpleCommandByName[]>;
    get simpleCommands(): readonly DSimpleCommand[];
    get botResolvedGuilds(): Promise<string[]>;
    get botGuilds(): IGuild[];
    set botGuilds(value: IGuild[]);
    get botId(): string;
    set botId(value: string);
    get guards(): GuardFunction[];
    set guards(value: GuardFunction[]);
    get prefix(): IPrefixResolver;
    set prefix(value: IPrefixResolver);
    get simpleCommandConfig(): SimpleCommandConfig | undefined;
    set simpleCommandConfig(value: SimpleCommandConfig | undefined);
    get silent(): boolean;
    set silent(value: boolean);
    /**
     * Extend original client class of discord.js
     *
     * @param options - Client options
     * ___
     *
     * [View Documentation](https://discordx.js.org/docs/discordx/basics/client)
     */
    constructor(options: ClientOptions);
    /**
     * Start bot
     *
     * @param token - Bot token
     * @param log - Enable log
     */
    login(token: string, log?: boolean): Promise<string>;
    /**
     * Print information about all events and commands to your console
     */
    printDebug(): void;
    /**
     * Get commands mapped by guild id (in case of multi bot, commands are filtered for this client only)
     * @returns
     */
    CommandByGuild(): Promise<Map<string, DApplicationCommand[]>>;
    /**
     * Initialize all the @Slash
     */
    initApplicationCommands(options?: {
        global?: InitCommandOptions;
        guild?: InitCommandOptions;
    }): Promise<void>;
    /**
     * Init application commands for guild
     * @param guildId - Guild identifier
     * @param DCommands - Array of commands
     * @param options - Options
     */
    initGuildApplicationCommands(guildId: string, DCommands: DApplicationCommand[], options?: InitCommandOptions): Promise<void>;
    /**
     * Init global application commands
     *
     * @param options - Options
     */
    initGlobalApplicationCommands(options?: InitCommandOptions): Promise<void>;
    /**
     * Clear the application commands globally or for some guilds
     *
     * @param guilds - The guild Ids (empty -> globally)
     */
    clearApplicationCommands(...guilds: Snowflake[]): Promise<void>;
    /**
     * Get the group tree of an slash interaction
     * /hello => ["hello"]
     * /test hello => ["test", "hello"]
     * /test hello me => ["test", "hello", "me"]
     *
     * @param interaction - The targeted slash interaction
     *
     * @returns
     */
    getApplicationCommandGroupTree(interaction: CommandInteraction | AutocompleteInteraction): string[];
    /**
     * Return the corresponding @Slash from a tree
     *
     * @param tree - Array of string
     *
     * @returns
     */
    getApplicationCommandFromTree(tree: string[]): DApplicationCommand | undefined;
    /**
     * Execute all types of interaction
     *
     * @param interaction - Interaction
     * @param log - Enable log
     *
     * @returns
     */
    executeInteraction(interaction: Interaction, log?: boolean): Awaited<unknown>;
    /**
     * Execute command interaction
     *
     * @param interaction - Interaction instance
     * @param log - Enable log
     *
     * @returns
     */
    executeCommandInteraction(interaction: CommandInteraction | AutocompleteInteraction, log?: boolean): Awaited<unknown>;
    /**
     * Execute component interaction
     *
     * @param interaction - Interaction instance
     * @param log - Enable log
     *
     * @returns
     */
    executeComponent(components: readonly DComponent[], interaction: ButtonInteraction | ModalSubmitInteraction | SelectMenuInteraction, log?: boolean): Promise<unknown>;
    /**
     * Execute context menu interaction
     *
     * @param interaction - Interaction instance
     * @param log - Enable log
     *
     * @returns
     */
    executeContextMenu(interaction: ContextMenuCommandInteraction, log?: boolean): Promise<unknown>;
    /**
     * Fetch prefix for message
     *
     * @param message - Message instance
     *
     * @returns
     */
    getMessagePrefix(message: Message): Promise<IPrefix>;
    /**
     * Parse command message
     *
     * @param prefix - Command prefix
     * @param message - Original message
     * @param caseSensitive - Execute case-sensitively
     *
     * @returns
     */
    parseCommand(prefix: IPrefix, message: Message, caseSensitive?: boolean): Promise<SimpleCommandParseType | SimpleCommandMessage>;
    /**
     * Execute the corresponding @SimpleCommand based on an message instance
     *
     * @param message - Message instance
     * @param options - Options
     *
     * @returns
     */
    executeCommand(message: Message, options?: {
        caseSensitive?: boolean;
        forcePrefixCheck?: boolean;
        log?: boolean;
    }): Promise<unknown>;
    /**
     * Parse reaction
     *
     * @param message - Original reaction
     *
     * @returns
     */
    parseReaction(message: MessageReaction | PartialMessageReaction): DReaction | undefined;
    /**
     * Execute the corresponding @Reaction based on an message reaction instance
     *
     * @param reaction - MessageReaction instance
     * @param options - Options
     *
     * @returns
     */
    executeReaction(reaction: MessageReaction | PartialMessageReaction, user: User | PartialUser, options?: {
        log?: boolean;
    }): Promise<unknown>;
    /**
     * Trigger an event manually (used for testing)
     *
     * @param options - Event data
     * @param params - Params to inject
     *
     * @returns
     */
    trigger(options: ITriggerEventData, params: any): Promise<any[]>;
    /**
     * Manually build client
     *
     * @param log - Enable log
     */
    build(log?: boolean): Promise<void>;
}
