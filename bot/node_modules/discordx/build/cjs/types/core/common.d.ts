import type { Message, Snowflake } from "discord.js";
import type { Client, DApplicationCommand, DComponent, DReaction, DSimpleCommand, GuardFunction, SimpleCommandMessage } from "../../index.js";
export declare type Awaitable<T> = Promise<T> | T;
export declare type Next = (...paramsToNext: unknown[]) => Promise<unknown>;
export declare type IPrefix = string | string[];
export declare type IPrefixResolver = string | string[] | ((message: Message) => Awaitable<string | string[]>);
export declare type IGuild = Snowflake | Snowflake[] | ((client: Client, command: DApplicationCommand | DComponent | DReaction | SimpleCommandMessage | undefined) => Snowflake | Snowflake[] | Promise<Snowflake> | Promise<Snowflake[]>);
export declare type ISimpleCommandByName = {
    command: DSimpleCommand;
    name: string;
};
export declare type ITriggerEventData = {
    client: Client;
    event: string;
    guards: GuardFunction[];
    once: boolean;
    rest: boolean;
};
