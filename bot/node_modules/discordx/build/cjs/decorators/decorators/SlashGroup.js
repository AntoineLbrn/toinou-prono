"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlashGroup = void 0;
const internal_1 = require("@discordx/internal");
const index_js_1 = require("../../index.js");
/**
 * Assign a group to a method or class
 *
 * @param options - Group options or name
 * @param root - Root name of group
 * ___
 *
 * [View discordx documentation](https://discordx.js.org/docs/discordx/decorators/command/slash-group)
 *
 * [View discord documentation](https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups)
 *
 * @category Decorator
 */
function SlashGroup(options, root) {
    return function (target, key, descriptor) {
        if (typeof options === "string") {
            // If @SlashGroup decorate a method edit the method and add it to subgroup
            index_js_1.MetadataStorage.instance.addModifier(internal_1.Modifier.create((original) => {
                if (original instanceof index_js_1.DDiscord) {
                    [...original.applicationCommands].forEach((obj) => {
                        obj.group = root ?? options;
                        obj.subgroup = root ? options : undefined;
                    });
                }
                else {
                    original.group = root ?? options;
                    original.subgroup = root ? options : undefined;
                }
            }, index_js_1.DApplicationCommand, index_js_1.DDiscord).decorateUnknown(target, key, descriptor));
        }
        else {
            (0, index_js_1.SlashNameValidator)(options.name);
            const clazz = target;
            if (options.root) {
                index_js_1.MetadataStorage.instance.addApplicationCommandSlashSubGroups(index_js_1.DApplicationCommandGroup.create({
                    name: options.name,
                    payload: {
                        description: options.description,
                        descriptionLocalizations: options.descriptionLocalizations,
                        nameLocalizations: options.nameLocalizations,
                    },
                    root: options.root,
                }).decorate(clazz, clazz.name));
            }
            else {
                index_js_1.MetadataStorage.instance.addApplicationCommandSlashGroups(index_js_1.DApplicationCommandGroup.create({
                    name: options.name,
                    payload: {
                        defaultMemberPermissions: options.defaultMemberPermissions,
                        description: options.description,
                        descriptionLocalizations: options.descriptionLocalizations,
                        dmPermission: options.dmPermission,
                        nameLocalizations: options.nameLocalizations,
                    },
                }).decorate(clazz, key ?? clazz.name));
            }
        }
    };
}
exports.SlashGroup = SlashGroup;
//# sourceMappingURL=SlashGroup.js.map