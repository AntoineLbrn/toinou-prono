"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DComponent = void 0;
const index_js_1 = require("../../index.js");
const Method_js_1 = require("./Method.js");
/**
 * @category Decorator
 */
class DComponent extends Method_js_1.Method {
    _type;
    _id;
    _guilds;
    _botIds;
    get type() {
        return this._type;
    }
    get botIds() {
        return this._botIds;
    }
    set botIds(value) {
        this._botIds = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get guilds() {
        return this._guilds;
    }
    set guilds(value) {
        this._guilds = value;
    }
    constructor(data) {
        super();
        this._type = data.type;
        this._id = data.id;
        this._guilds = data.guilds ?? [];
        this._botIds = data.botIds ?? [];
    }
    static create(data) {
        return new DComponent(data);
    }
    isBotAllowed(botId) {
        if (!this.botIds.length) {
            return true;
        }
        return this.botIds.includes(botId);
    }
    async getGuilds(client) {
        const guilds = await (0, index_js_1.resolveIGuilds)(client, this, [
            ...client.botGuilds,
            ...this.guilds,
        ]);
        return guilds;
    }
    async isGuildAllowed(client, guildId) {
        if (!guildId) {
            return true;
        }
        const guilds = await this.getGuilds(client);
        if (!guilds.length) {
            return true;
        }
        return guilds.includes(guildId);
    }
    isId(text) {
        return typeof this.id === "string" ? this.id === text : this.id.test(text);
    }
    parseParams() {
        return [];
    }
}
exports.DComponent = DComponent;
//# sourceMappingURL=DComponent.js.map